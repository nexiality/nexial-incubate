<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13.2 r1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CassandraConnection guiclass="TestBeanGUI" testclass="CassandraConnection" testname="Cassandra Connection" enabled="true">
        <stringProp name="contactPoints">${__P(hostname,localhost}</stringProp>
        <stringProp name="keyspace">stock</stringProp>
        <stringProp name="loadBalancer">TokenAware(DCAwareRoundRobin)</stringProp>
        <stringProp name="localDataCenter"></stringProp>
        <stringProp name="password">${testdata1}</stringProp>
        <stringProp name="sessionName">session1</stringProp>
        <stringProp name="username"></stringProp>
      </CassandraConnection>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Happy End-User" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <longProp name="ThreadGroup.start_time">1442805521000</longProp>
        <longProp name="ThreadGroup.end_time">1442805521000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Trade Dates" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">csv/tradedates.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">trade_date</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Ticker" enabled="true">
          <stringProp name="delimiter">|</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">csv/weighted-tickers.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">ticker</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Trade Times" enabled="true">
          <stringProp name="filename">csv/times-rnd.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">start_time,end_time</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="5: Quote A Stock" enabled="true">
          <stringProp name="batchSize"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="query">select * from trades_by_tickerday where ticker = ? and trade_date = ? and trade_timestamp &gt;= ? and trade_timestamp &lt; ?</stringProp>
          <stringProp name="queryArguments">${ticker},${trade_date} 00:00:00-0000,${trade_date} ${start_time}+0000,${trade_date} ${end_time}+0000</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="variableNames"></stringProp>
        </CassandraSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Write New Trades" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(numWriters,6)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <longProp name="ThreadGroup.start_time">1394856749000</longProp>
        <longProp name="ThreadGroup.end_time">1394856749000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="New Trades" enabled="true">
          <stringProp name="filename">csv/newtrades.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">i_trade_id,i_ticker,i_exchng,i_trade_timestamp,i_price,i_quantity,i_trade_date,i_extra_id,i_company_name,i_tradehour</stringProp>
          <stringProp name="delimiter">|</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="0: Write trades" enabled="true">
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="query">insert into trades (trade_id,ticker,exchng,trade_timestamp, price , quantity , trade_date, company_name, description) values (?,?,?,?,?,?,?,?,?)</stringProp>
          <stringProp name="queryArguments">${i_trade_id},${i_ticker},${i_exchng},${i_trade_timestamp},${i_price},${i_quantity},${i_trade_date},${i_company_name},${DESCRIPTION}</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="batchSize">${__P(batchSize,1)}</stringProp>
        </CassandraSampler>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="1: Write trades_by_tickerday" enabled="true">
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="query">insert into trades_by_tickerday (trade_id,ticker,exchng,trade_timestamp, price , quantity , trade_date, company_name, description) values (?,?,?,?,?,?,?,?,?)</stringProp>
          <stringProp name="queryArguments">${i_trade_id},${i_ticker},${i_exchng},${i_trade_timestamp},${i_price},${i_quantity},${i_trade_date},${i_company_name},${DESCRIPTION}</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="batchSize">${__P(batchSize,1)}</stringProp>
        </CassandraSampler>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="2: Write trades_by_tickerhour" enabled="true">
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="query">insert into trades_by_tickerhour (trade_id,ticker,exchng,trade_timestamp, price , quantity , trade_period, company_name, description) values (?,?,?,?,?,?,?,?,?)</stringProp>
          <stringProp name="queryArguments">${i_trade_id},${i_ticker},${i_exchng},${i_trade_timestamp},${i_price},${i_quantity},${i_trade_date},${i_company_name},${DESCRIPTION}</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="batchSize">${__P(batchSize,1)}</stringProp>
        </CassandraSampler>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="3: Write trades_by_tickerminute" enabled="true">
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="query">insert into trades_by_tickerminute (trade_id,ticker,exchng,trade_timestamp, price , quantity , trade_period, company_name, description) values (?,?,?,?,?,?,?,?,?)</stringProp>
          <stringProp name="queryArguments">${i_trade_id},${i_ticker},${i_exchng},${i_trade_timestamp},${i_price},${i_quantity},${i_trade_date},${i_company_name},${DESCRIPTION}</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="batchSize">${__P(batchSize,1)}</stringProp>
        </CassandraSampler>
        <hashTree/>
        <CassandraSampler guiclass="TestBeanGUI" testclass="CassandraSampler" testname="4: Write trades_by_datehour" enabled="true">
          <stringProp name="sessionName">session1</stringProp>
          <stringProp name="queryType">Prepared Statement</stringProp>
          <stringProp name="query">insert into trades_by_datehour (trade_id,date_hour, ticker,exchng,trade_timestamp, price , quantity , trade_date, company_name, description) values (?,?,?,?,?,?,?,?,?,?)</stringProp>
          <stringProp name="queryArguments">${i_trade_id},${i_tradehour},${i_ticker},${i_exchng},${i_trade_timestamp},${i_price},${i_quantity},${i_trade_date},${i_company_name},${DESCRIPTION}</stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="consistencyLevel">${__P(consistencyLevel,LOCAL_ONE)}</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="batchSize">${__P(batchSize,1)}</stringProp>
        </CassandraSampler>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <intProp name="calcMode">4</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>6000.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
